# -*- coding: utf-8 -*-
"""main.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qBRoaCYJeWsvIVTVxfBlO781Y3U0ugX-
"""

import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sentence_transformers import SentenceTransformer
import numpy as np

# Load dataset
  # Ensure this path is correct
data = pd.read_csv('/content/drive/MyDrive/skindataall.csv')

# ----------------------------
# Preprocessing
# ----------------------------
# Extract relevant columns for products
product_features = ['Product_id', 'Ingredients_Cleaned', 'Skin_Type', 'Skin_Tone', 'Price', 'Category']
product_data = data[product_features]

print(product_data.head())

# ----------------------------
# Dynamic NLP-Based Content Filtering
# ----------------------------
# Use a pre-trained SentenceTransformer for ingredient embeddings
embedding_model = SentenceTransformer('all-MiniLM-L6-v2')

# Generate embeddings for product ingredients
ingredient_embeddings = embedding_model.encode(product_data['Ingredients_Cleaned'], convert_to_tensor=True)

# Compute cosine similarity between product embeddings
content_similarity = cosine_similarity(ingredient_embeddings.cpu().numpy())

# Define a list of harmful ingredients
harmful_ingredients = [
    "paraben", "sulfate", "formaldehyde", "phthalates", "triclosan", "oxybenzone"
]

# Function to detect harmful ingredients in a product
def detect_harmful_ingredients(ingredients):
    # Normalize by converting to lowercase and removing extra spaces
    ingredients = ingredients.lower().strip()
    harmful_found = [ingredient for ingredient in harmful_ingredients if ingredient.lower() in ingredients]
    return harmful_found

# Function to recommend products based on user inputs
def recommend_products(user_skin_type, user_skin_tone, price_range, category, top_n=5):
    # Filter products based on skin type, skin tone, price range, and category
    filtered_products = product_data[
        (product_data['Skin_Type'].str.contains(user_skin_type, case=False, na=False)) &
        (product_data['Skin_Tone'].str.contains(user_skin_tone, case=False, na=False)) &
        (product_data['Price'] >= price_range[0]) &
        (product_data['Price'] <= price_range[1]) &
        (product_data['Category'].str.contains(category, case=False, na=False))
    ]
    recommendations = []
    for idx, row in filtered_products.iterrows():
        harmful_found = detect_harmful_ingredients(row['Ingredients_Cleaned'])
        # Exclude products with harmful ingredients
        if not harmful_found:
            recommendations.append({"Product_id": row['Product_id'], "Price": row['Price']})
        if len(recommendations) >= top_n:
            break

    if len(recommendations) == 0:
        # If no products match, suggest an alternative outside the price range
        print("\nSorry for the inconvenience. Unfortunately, we couldn't find any products within your price range. However, we recommend the following product:")
        fallback_product = product_data.iloc[0]  # For example, picking the first product in the dataset
        print(f"Product ID: {fallback_product['Product_id']}, Price: {fallback_product['Price']}")

    return recommendations

# ----------------------------
# User Interaction
# ----------------------------
def main():
    while True:
        print("\nSelect an option:")
        print("1. Check for harmful ingredients in a product")
        print("2. Get product recommendations based on your skin attributes")
        print("3. Exit")
        choice = input("Enter your choice (1/2/3): ")

        if choice == '1':
            ingredients = input("Enter the product's ingredients (comma-separated): ")
            harmful_found = detect_harmful_ingredients(ingredients)
            if harmful_found:
                print(f"Harmful ingredients found: {', '.join(harmful_found)}")
            else:
                print("No harmful ingredients found.")

        elif choice == '2':
            user_skin_type = input("Enter your skin type (e.g., dry, normal, oily, sensitive): ").strip().lower()
            user_skin_tone = input("Enter your skin tone (e.g., fair, medium, olive, tan, deep): ").strip().lower()
            price_min = float(input("Enter your minimum price: ").strip())
            price_max = float(input("Enter your maximum price: ").strip())
            category = input("Enter the product category (e.g., moisturizer, cleanser, serum): ").strip().lower()
            price_range = (price_min, price_max)

            recommendations = recommend_products(user_skin_type, user_skin_tone, price_range, category)

            if recommendations:
                print("Recommended products for you:")
                for rec in recommendations:
                    print(f"Product ID: {rec['Product_id']}, Price: {rec['Price']}")
            else:
                print("No products found matching your criteria.")

        elif choice == '3':
            print("Exiting the program.")
            break

        else:
            print("Invalid choice. Please enter 1, 2, or 3.")
# ----------------------------
# User Interaction
# ----------------------------
def main():
    while True:
        print("\nSelect an option:")
        print("1. Check for harmful ingredients in a product")
        print("2. Get product recommendations based on your skin attributes")
        print("3. Exit")
        choice = input("Enter your choice (1/2/3): ")

        if choice == '1':
            ingredients = input("Enter the product's ingredients (comma-separated): ")
            harmful_found = detect_harmful_ingredients(ingredients)
            if harmful_found:
                print(f"Harmful ingredients found: {', '.join(harmful_found)}")
            else:
                print("No harmful ingredients found.")

        elif choice == '2':
            user_skin_type = input("Enter your skin type (e.g., dry, normal, oily, sensitive): ").strip().lower()
            user_skin_tone = input("Enter your skin tone (e.g., fair, medium, olive, tan, deep): ").strip().lower()
            price_min = float(input("Enter your minimum price: ").strip())
            price_max = float(input("Enter your maximum price: ").strip())
            category = input("Enter the product category (e.g., moisturizer, cleanser, serum): ").strip().lower()
            price_range = (price_min, price_max)

            recommendations = recommend_products(user_skin_type, user_skin_tone, price_range, category)

            if recommendations:
                print("Recommended products for you:")
                for rec in recommendations:
                    print(f"Product ID: {rec['Product_id']}, Price: {rec['Price']}")
            else:
                print("No products found matching your criteria.")

        elif choice == '3':
            print("Exiting the program.")
            break

        else:
            print("Invalid choice. Please enter 1, 2, or 3.")

if __name__ == "__main__":
    main()



!pip install pytesseract

import pandas as pd
from sklearn.metrics.pairwise import cosine_similarity
from sentence_transformers import SentenceTransformer
import numpy as np
import pytesseract
from PIL import Image

# Load dataset
file_path = "/content/drive/MyDrive/skindataall.csv"  # Ensure this path is correct
data = pd.read_csv(file_path)

# ----------------------------
# Preprocessing
# ----------------------------
# Extract relevant columns for products
product_features = ['Product_id', 'Ingredients_Cleaned', 'Skin_Type', 'Skin_Tone', 'Price', 'Category']
product_data = data[product_features]

# ----------------------------
# Dynamic NLP-Based Content Filtering
# ----------------------------
# Use a pre-trained SentenceTransformer for ingredient embeddings
embedding_model = SentenceTransformer('all-MiniLM-L6-v2')

# Generate embeddings for product ingredients
ingredient_embeddings = embedding_model.encode(product_data['Ingredients_Cleaned'], convert_to_tensor=True)

# Compute cosine similarity between product embeddings
content_similarity = cosine_similarity(ingredient_embeddings.cpu().numpy())

# Define a list of harmful ingredients
harmful_ingredients = [
    "paraben", "sulfate", "formaldehyde", "phthalates", "triclosan", "oxybenzone"
]

# Function to detect harmful ingredients in a product
def detect_harmful_ingredients(ingredients):
    # Normalize by converting to lowercase and removing extra spaces
    ingredients = ingredients.lower().strip()
    harmful_found = [ingredient for ingredient in harmful_ingredients if ingredient.lower() in ingredients]
    return harmful_found

# Function to extract text from image using OCR
def extract_text_from_image(image_path):
    try:
        # Open the image file
        img = Image.open(image_path)
        # Use pytesseract to do OCR on the image
        text = pytesseract.image_to_string(img)
        return text
    except Exception as e:
        print(f"Error extracting text from image: {e}")
        return ""

# Function to recommend products based on user inputs
def recommend_products(user_skin_type, user_skin_tone, price_range, category, top_n=5):
    # Filter products based on skin type, skin tone, price range, and category
    filtered_products = product_data[
        (product_data['Skin_Type'].str.contains(user_skin_type, case=False, na=False)) &
        (product_data['Skin_Tone'].str.contains(user_skin_tone, case=False, na=False)) &
        (product_data['Price'] >= price_range[0]) &
        (product_data['Price'] <= price_range[1]) &
        (product_data['Category'].str.contains(category, case=False, na=False))
    ]

    recommendations = []
    for idx, row in filtered_products.iterrows():
        harmful_found = detect_harmful_ingredients(row['Ingredients_Cleaned'])
        # Exclude products with harmful ingredients
        if not harmful_found:
            recommendations.append({"Product_id": row['Product_id'], "Price": row['Price']})
        if len(recommendations) >= top_n:
            break

    if len(recommendations) == 0:
        # If no products match, suggest an alternative outside the price range
        print("\nSorry for the inconvenience. Unfortunately, we couldn't find any products within your price range. However, we recommend the following product:")
        fallback_product = product_data.iloc[0]  # For example, picking the first product in the dataset
        print(f"Product ID: {fallback_product['Product_id']}, Price: {fallback_product['Price']}")

    return recommendations

# ----------------------------
# Adding New Product Data
# ----------------------------
def add_new_product():
    # Get user input for new product data
    username = input("Enter your username: ")
    skin_tone = input("Enter your skin tone (e.g., fair, medium, olive, tan, deep): ").strip().lower()
    skin_type = input("Enter your skin type (e.g., dry, normal, oily, sensitive): ").strip().lower()
    eye_color = input("Enter your eye color: ").strip().lower()
    hair_color = input("Enter your hair color: ").strip().lower()
    rating_star = float(input("Enter the rating star (1-5): "))
    review = input("Enter your review: ")
    product = input("Enter the product name: ")
    brand = input("Enter the brand: ")
    price = float(input("Enter the product price: "))
    rating = float(input("Enter the rating: "))
    ingredients = input("Enter the product ingredients (comma-separated): ")
    combination = input("Enter if it suits combination skin (yes/no): ").strip().lower()
    dry = input("Enter if it suits dry skin (yes/no): ").strip().lower()
    normal = input("Enter if it suits normal skin (yes/no): ").strip().lower()
    oily = input("Enter if it suits oily skin (yes/no): ").strip().lower()
    sensitive = input("Enter if it suits sensitive skin (yes/no): ").strip().lower()
    category = input("Enter the product category (e.g., moisturizer, cleanser, serum): ").strip().lower()
    product_url = input("Enter the product URL: ").strip()
    user_id = input("Enter your user ID: ").strip()
    product_id = input("Enter the product ID: ").strip()
    review_cleaned = input("Enter cleaned review text: ")
    good_stuff = input("Enter the good stuff in the product: ")

    # Create a new row of data
    new_data = {
        "Username": username,
        "Skin_Tone": skin_tone,
        "Skin_Type": skin_type,
        "Eye_Color": eye_color,
        "Hair_Color": hair_color,
        "Rating_Star": rating_star,
        "Review": review,
        "Product": product,
        "Brand": brand,
        "Price": price,
        "Rating": rating,
        "Ingredients": ingredients,
        "Combination": combination,
        "Dry": dry,
        "Normal": normal,
        "Oily": oily,
        "Sensitive": sensitive,
        "Category": category,
        "Product_Url": product_url,
        "User_id": user_id,
        "Product_id": product_id,
        "Review_Cleaned": review_cleaned,
        "Good_Stuff": good_stuff,
        "Ing_Tfidf": ""  # You can add TF-IDF vectorization if needed
    }

    # Append new data to the existing CSV file
    new_row_df = pd.DataFrame([new_data])
    new_row_df.to_csv(file_path, mode='a', header=False, index=False)
    print("New product data added successfully!")

# ----------------------------
# User Interaction
# ----------------------------
def main():
    while True:
        print("\nSelect an option:")
        print("1. Check for harmful ingredients in a product")
        print("2. Get product recommendations based on your skin attributes")
        print("3. Check harmful ingredients from an image")
        print("4. Add new product data")
        print("5. Exit")
        choice = input("Enter your choice (1/2/3/4/5): ")

        if choice == '1':
            ingredients = input("Enter the product's ingredients (comma-separated): ")
            harmful_found = detect_harmful_ingredients(ingredients)
            if harmful_found:
                print(f"Harmful ingredients found: {', '.join(harmful_found)}")
            else:
                print("No harmful ingredients found.")

        elif choice == '2':
            user_skin_type = input("Enter your skin type (e.g., dry, normal, oily, sensitive): ").strip().lower()
            user_skin_tone = input("Enter your skin tone (e.g., fair, medium, olive, tan, deep): ").strip().lower()
            price_min = float(input("Enter your minimum price: ").strip())
            price_max = float(input("Enter your maximum price: ").strip())
            category = input("Enter the product category (e.g., moisturizer, cleanser, serum): ").strip().lower()
            price_range = (price_min, price_max)

            recommendations = recommend_products(user_skin_type, user_skin_tone, price_range, category)
            if recommendations:
                print("Recommended products for you:")
                for rec in recommendations:
                    print(f"Product ID: {rec['Product_id']}, Price: {rec['Price']}")
            else:
                print("No products found matching your criteria.")

        elif choice == '3':
            image_path = input("Enter the path to the product image: ").strip()
            extracted_text = extract_text_from_image(image_path)
            if extracted_text:
                print(f"Extracted Text: {extracted_text}")
                harmful_found = detect_harmful_ingredients(extracted_text)
                if harmful_found:
                    print(f"Harmful ingredients found: {', '.join(harmful_found)}")
                else:
                    print("No harmful ingredients found.")
            else:
                print("No text extracted from the image.")

        elif choice == '4':
            add_new_product()

        elif choice == '5':
            print("Exiting the program.")
            break

        else:
            print("Invalid choice. Please enter 1, 2, 3, 4, or 5.")

if __name__ == "__main__":
    main()